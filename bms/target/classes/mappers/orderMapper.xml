<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<mapper namespace="orderMapper">
	<insert id="insertOrder" parameterType="OrderDTO">
		INSERT INTO ORDERS(
				
				MEMBER_ID,
				BOOK_CD,
				BOOK_NM,
				ORDER_BOOK_QTY,
				TOTAL_PRICE,
				PAYMENT_METHOD,
				HP,
				RECEIVER,
				DELIVERY_ADRESS,
				DELIVERY_MESSAGE,
				DELIVERY_STATUS,
				ORDER_DT						
		)
		VALUES (
				
				#{memberId},
				#{bookCd},	
				#{bookNm},	
				#{orderBookQty},
				#{totalPrice},
				#{paymentMethod},
				#{hp},	
				#{receiver},	
				#{deliveryAdress},	
				#{deliveryMessage},
				'배송준비중',
				NOW()
		 )
	</insert>
	
	
	
	<update id="updateStock" parameterType="hashmap">
		UPDATE
				BOOK
		SET
				STOCK=STOCK-#{orderBookQty}
		WHERE
				BOOK_CD=#{bookCd}
	</update>
	
	<delete id="deleteCart" parameterType="String">
		DELETE FROM
				CART
		WHERE
				MEMBER_ID = #{memberId}				
	</delete>
	
	
	
	<select id="selectOrderList" resultType="OrderDTO">
		SELECT
				*
		FROM
				ORDERS
		WHERE
				MEMBER_ID = #{memberId}
		ORDER BY
    			ORDER_DT DESC
    	
	</select>
	
	<select id="selectOrderOne" parameterType="int" resultType="OrderDTO">
		SELECT
				*
		FROM
				ORDERS
		WHERE
				ORDER_CD = #{orderCd}
	</select>
	
	<update id="updateOrder" parameterType="OrderDTO">
		UPDATE
				ORDERS
		<set>
			<if test='hp != null and !hp.equals("")'>
				HP = #{hp},  
			</if>
			<if test='receiver != null and !receiver.equals("")'>
				RECEIVER = #{receiver},
			</if>
			<if test='deliveryAdress != null and !deliveryAdress.equals("")'>
				DELIVERY_ADRESS = #{deliveryAdress},
			</if>
			<if test='deliveryMessage != null and !deliveryMessage.equals("")'>
				DELIVERY_MESSAGE = #{deliveryMessage}
			</if>
			<if test='deliveryStatus != null and !deliveryStatus.equals("")'>
				DELIVERY_STATUS = #{deliveryStatus}
			</if>
			
		</set>
		
		WHERE
				ORDER_CD = #{orderCd}
	</update>
	
	<delete id="deleteOrder" parameterType="int">
		DELETE	FROM
				ORDERS
		WHERE
				ORDER_CD = #{orderCd}
	</delete>
	
	<select id="adminOrderList" parameterType="hashMap" resultType="OrderDTO">
		<choose>
			<when test='searchCategory.equals("total")'>
				<choose>
					<when test='searchContent.equals("")'>
						SELECT
								ORDER_CD,
								MEMBER_ID,
								ORDER_DT,
								DELIVERY_STATUS
								
						FROM
								ORDERS
						ORDER BY
				       			ORDER_DT DESC
				       
						
					</when>
					<otherwise>
						SELECT
								ORDER_CD,
								MEMBER_ID,
								ORDER_DT,
								DELIVERY_STATUS
								
						FROM
								ORDERS
								
						WHERE
								MEMBER_ID LIKE CONCAT('%', #{searchContent}, '%') OR
								DELIVERY_STATUS LIKE CONCAT('%', #{searchContent}, '%')
						ORDER BY
				       			ORDER_DT DESC
				    
						
					</otherwise>
				</choose>
			</when>
			<otherwise>
					SELECT
							ORDER_CD,
							MEMBER_ID,
							ORDER_DT,
							DELIVERY_STATUS
							
					FROM
							ORDERS
							
					WHERE
							<if test='searchCategory.equals("deliveryStatus")'>
								DELIVERY_STATUS LIKE CONCAT('%' , #{searchContent} , '%')
							</if>
							<if test='searchCategory.equals("memberId")'>
								MEMBER_ID LIKE CONCAT('%' , #{searchContent} , '%')
							</if>
					ORDER BY
			       			ORDER_DT DESC
			      
			</otherwise>
		</choose>
	</select>
	
	<select id="allsalse" resultType="int">
		SELECT 
				SUM(TOTAL_PRICE) AS totalSales
        FROM 
        		ORDERS
	</select>
	
	<select id="bestSeller" resultType="OrderDTO">
		SELECT
				BOOK_CD,
			    BOOK_NM,
			    SUM(ORDER_BOOK_QTY) AS totalSales
		FROM
		    	ORDERS
		GROUP BY
		    	BOOK_CD, BOOK_NM
		ORDER BY
		    	totalSales DESC
		LIMIT 10
	</select>
	
	<select id="getWomanSales" resultType="int">
		SELECT
            	SUM(ORDERS.TOTAL_PRICE) AS womanSales
        FROM
        		ORDERS
        INNER	JOIN
        		MEMBER ON 
            	ORDERS.MEMBER_ID = MEMBER.MEMBER_ID
        WHERE
            	MEMBER.SEX = 'w'
    </select>
    
    <select id="getManSales" resultType="int">
    	SELECT
    			SUM(O.TOTAL_PRICE)	AS	manSales
    	FROM
    			ORDERS O
    	INNER	JOIN
    			MEMBER M 
    			ON O.MEMBER_ID = M.MEMBER_ID
    	WHERE
    			M.SEX='m'
    			
    </select>
	
	<select id="getWomanBestSeller" resultType="OrderDTO">
		 SELECT
            ORDERS.BOOK_CD,
            ORDERS.BOOK_NM,
            SUM(ORDERS.ORDER_BOOK_QTY) AS orderBookQty
        FROM
            ORDERS
        INNER JOIN
            MEMBER ON ORDERS.MEMBER_ID = MEMBER.MEMBER_ID
        WHERE
            MEMBER.SEX = 'w'
        GROUP BY
            ORDERS.BOOK_CD, ORDERS.BOOK_NM
        ORDER BY
            orderBookQty DESC
        LIMIT 10
	</select>
	
	<select id="getManBestSeller" resultType="OrderDTO">
		SELECT
				O.BOOK_CD,
            	O.BOOK_NM,
				SUM(O.ORDER_BOOK_QTY)	AS	orderBookQty
		FROM
				ORDERS	O
		INNER	JOIN
				MEMBER	M
				ON	M.MEMBER_ID=O.MEMBER_ID
		WHERE
				M.SEX='m'
		GROUP BY
        		O.BOOK_CD, O.BOOK_NM
        ORDER BY
        		orderBookQty DESC
        LIMIT 10
	</select>
	<select id="selectOneOrderer" parameterType="String" resultType="MemberDTO">
		SELECT
				*
		FROM
				MEMBER
		WHERE
				MEMBER_ID = #{memberId}
	</select>
	
</mapper>